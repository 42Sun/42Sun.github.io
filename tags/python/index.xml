<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 你好，孙丁一</title>
    <link>https://sundingyi.com/tags/python/</link>
    <description>Recent content in Python on 你好，孙丁一</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 28 Jun 2020 18:28:15 +0800</lastBuildDate>
    
	<atom:link href="https://sundingyi.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>字符串和常用数据结构</title>
      <link>https://sundingyi.com/blog/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 28 Jun 2020 18:28:15 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>字符串 字符串是由零个或多个字符组成的有限序列。在Python中，用&#39;&#39;或&amp;quot;&amp;quot;将一个或多个字符包含起来就可以表示一个字符串。
转义符号 使用转义符号\可以将它后面的字母不再表示原本的意思。在\后面还可以跟一个八进制或者十六进制数来表示字符，例如\141和\x61都代表小写字母a，前者是八进制的表示法，后者是十六进制的表示法。也可以在\后面跟Unicode字符编码来表示字符。
如果不希望转义，可以在字符串前面加r
简化 a, b = 5, 10 print(&amp;#39;%d* %d= %d&amp;#39; % (a, b, a * b)) 当然，我们也可以用字符串提供的方法来完成字符串的格式，代码如下所示。
a, b = 5, 10 print(&amp;#39;{0} * {1} = {2}&amp;#39;.format(a, b, a * b)) Python 3.6以后，格式化字符串还有更为简洁的书写方式，就是在字符串前加上字母f，我们可以使用下面的语法糖来简化上面的代码。
a, b = 5, 10 print(f&amp;#39;{a} * {b} = {a * b}&amp;#39;) str1 = &amp;#39;hello, world!&amp;#39; # 通过内置函数len计算字符串的长度 print(len(str1)) # 13 # 获得字符串首字母大写的拷贝 print(str1.capitalize()) # Hello, world! # 获得字符串每个单词首字母大写的拷贝 print(str1.title()) # Hello, World! # 获得字符串变大写后的拷贝 print(str1.</description>
    </item>
    
    <item>
      <title>函数和模块</title>
      <link>https://sundingyi.com/blog/%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 28 Jun 2020 15:53:03 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E5%9D%97/</guid>
      <description>函数 将某一个功能封装到函数中。需要这个功能的时候只需要调用这个函数就可以了。 可以不传入参数。
定义函数 使用def关键字来定义函数，函数的命名和变量的命名相同，即下划线命名法。 并且需要return回一个值作为函数执行结果。
&amp;#34;&amp;#34;&amp;#34; 输入M和N计算C(M,N) 阶乘运算 &amp;#34;&amp;#34;&amp;#34; def fac(num): result = 1 for i in range(1, num + 1): result *= i return result m = int(input(&amp;#39;请输入m：&amp;#39;)) n = int(input(&amp;#39;请输入n：&amp;#39;)) print(fac(m) // fac(n) // fac(m - n)) 可变参数 当传入变量时如此定义def example(*name)即是一个可变参数。
模块 为了避免函数的滥用，每个文件即是一个模块（module），使用import即可导入指定的模块。from .. import .. 如果导入的一个模块还含有可执行的代码，那么在导入这个模块的时候就会执行这些代码。
if __name__ = &amp;#39;__main__&amp;#39;: 如果被导入的模块中含有如此，则只会在单纯执行此模块时才会运行。导入并不会执行
函数的重命名 import example as exa</description>
    </item>
    
    <item>
      <title>Python基础</title>
      <link>https://sundingyi.com/blog/python%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 27 Jun 2020 14:19:44 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/python%E5%9F%BA%E7%A1%80/</guid>
      <description>Python历史  1989年圣诞节：Guido von Rossum开始写Python语言的编译器。 1991年2月：第一个Python编译器（同时也是解释器）诞生，它是用C语言实现的（后面），可以调用C语言的库函数。在最早的版本中，Python已经提供了对“类”，“函数”，“异常处理”等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序。 1994年1月：Python 1.0正式发布。 2000年10月16日：Python 2.0发布，增加了完整的垃圾回收，提供了对Unicode的支持。与此同时，Python的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成。 2008年12月3日：Python 3.0发布，它并不完全兼容之前的Python代码，不过因为目前还有不少公司在项目和运维中使用Python 2.x版本，所以Python 3.x的很多新特性后来也被移植到Python 2.6/2.7版本中。  更详细的历史：《Python简史》
 变量  整形：Python可以处理任意大小的整数，在Python3中只有int。并且支持二进制（0b开头），八进制（0o开头），十进制，十六进制（0x开头）。 浮点型：小数。浮点指的是在用科学计数法表示时，小数点是可以浮动的。支持科学计数法（1.11e2）。 字符串型：以&#39;&#39;或&amp;quot;&amp;quot;括起来。用&#39;&#39;&#39; &#39;&#39;&#39;的表示方法可以多行。 布尔型： True和 False，布尔运算亦可以得出布尔型。 复数型：如1+1j，并不常用。  给变量命名  硬性规则： 字母数字下划线组成，数字不能开头。 大小写区分 不要用关键字 PEP 8规则： 用小写字母拼写，多个单词用下划线连接。 受保护的实例属性用单个下划线开头。 私有的实例属性用两个下划线开头。  变量的转换   int()：将一个数值或字符串转换成整数，可以指定进制。
  float()：将一个字符串转换成浮点数。
  str()：将指定的对象转换成字符串形式，可以指定编码。
  chr()：将整数转换成该编码对应的字符串（一个字符）。
  ord()：将字符串（一个字符）转换成对应的编码（整数）。
  分支结构 if 关键词有if,elif,else
#英制单位英寸和公制单位厘米互换 value = float(input(&amp;#39;输入长度：&amp;#39;)) unit = input(&amp;#39;输入单位：&amp;#39;) if unit == &amp;#39;in&amp;#39; or unit == &amp;#39;英寸&amp;#39;: print(str(value) + &amp;#39;英寸=&amp;#39; + str(value * 2.</description>
    </item>
    
  </channel>
</rss>