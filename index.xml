<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>孙丁一的博客</title>
    <link>https://sundingyi.com/</link>
    <description>Recent content on 孙丁一的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 16 Mar 2021 17:27:36 +0800</lastBuildDate><atom:link href="https://sundingyi.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>照片</title>
      <link>https://sundingyi.com/projects/photography/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sundingyi.com/projects/photography/</guid>
      <description></description>
    </item>
    
    <item>
      <title>画</title>
      <link>https://sundingyi.com/projects/design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sundingyi.com/projects/design/</guid>
      <description></description>
    </item>
    
    <item>
      <title>每日LeetCode 29</title>
      <link>https://sundingyi.com/blog/42/</link>
      <pubDate>Tue, 16 Mar 2021 17:27:36 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/42/</guid>
      <description>给定一个二叉树，判断它是否是高度平衡的二叉树。 本题中，一棵高度平衡二叉树定义为： 一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。 class</description>
    </item>
    
    <item>
      <title>每日LeetCode 27-28</title>
      <link>https://sundingyi.com/blog/41/</link>
      <pubDate>Mon, 15 Mar 2021 15:44:33 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/41/</guid>
      <description>27 给定一个二叉树，找出其最大深度。 二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。 说明: 叶子节点是指没有子节点的节点。 示例： 给定二叉</description>
    </item>
    
    <item>
      <title>每日LeetCode 26</title>
      <link>https://sundingyi.com/blog/40/</link>
      <pubDate>Sun, 14 Mar 2021 21:09:33 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/40/</guid>
      <description>26 给定一个二叉树，检查它是否是镜像对称的。 例如，二叉树 [1,2,2,3,4,4,3] 是对称的。 1 / \ 2 2 / \ / \ 3 4 4 3 class Solution { public boolean isSymmetric(TreeNode root) { return isMirror(root, root); } public boolean isMirror(TreeNode root, TreeNode root2) { if (root == null &amp;amp;&amp;amp;</description>
    </item>
    
    <item>
      <title>每日LeetCode 25</title>
      <link>https://sundingyi.com/blog/39/</link>
      <pubDate>Sat, 13 Mar 2021 15:21:44 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/39/</guid>
      <description>25 给你两棵二叉树的根节点 p 和 q ，编写一个函数来检验这两棵树是否相同。 如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。 示例 1</description>
    </item>
    
    <item>
      <title>每日LeetCode 24</title>
      <link>https://sundingyi.com/blog/38/</link>
      <pubDate>Fri, 12 Mar 2021 19:20:13 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/38/</guid>
      <description>24 给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中*，*使 nums1 成为一个有序数组。 初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大</description>
    </item>
    
    <item>
      <title>每日LeetCode 18-23</title>
      <link>https://sundingyi.com/blog/37/</link>
      <pubDate>Thu, 11 Mar 2021 10:40:49 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/37/</guid>
      <description>18 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 示例 1： 输入：nums = [-2,1,-3,4,-1,2,1,-5,4] 输出：6 解释：连续子</description>
    </item>
    
    <item>
      <title>每日LeetCode 11-17</title>
      <link>https://sundingyi.com/blog/36/</link>
      <pubDate>Wed, 10 Mar 2021 12:51:00 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/36/</guid>
      <description>11 给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。 请你将两个数相加，并以相同形式</description>
    </item>
    
    <item>
      <title>每日LeetCode 9-10</title>
      <link>https://sundingyi.com/blog/35/</link>
      <pubDate>Tue, 09 Mar 2021 16:00:04 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/35/</guid>
      <description>9 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。 字符 数值 I 1 V 5 X 10 L 50 C 100 D 500 M 1000 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写</description>
    </item>
    
    <item>
      <title>每日LeetCode 1-8</title>
      <link>https://sundingyi.com/blog/34/</link>
      <pubDate>Mon, 08 Mar 2021 08:43:45 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/34/</guid>
      <description>1 给你一个 32 位的有符号整数 x ，返回 x 中每位上的数字反转后的结果。 如果反转后整数超过 32 位的有符号整数的范围 [−231, 231 − 1] ，就返回 0。 假设环</description>
    </item>
    
    <item>
      <title>《群魔》与虚无主义</title>
      <link>https://sundingyi.com/blog/33/</link>
      <pubDate>Thu, 04 Feb 2021 17:20:06 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/33/</guid>
      <description>陀思妥耶夫斯基著作《群魔》，阅读时间为 2020 年 12 月 10 日至 2021 年 2 月 3 日，拖沓这么久主要还是因为中途直接和考试发生对撞，导致我根本没心思读要考试的书</description>
    </item>
    
    <item>
      <title>现代和弦代号</title>
      <link>https://sundingyi.com/blog/32/</link>
      <pubDate>Fri, 29 Jan 2021 18:22:10 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/32/</guid>
      <description>三和弦（triad） 由三个音组成的和弦。 七和弦（seventh chord） 由四个音组成的和弦。 九和弦（ninth chord） 由五个音组成的和</description>
    </item>
    
    <item>
      <title>和Notion，讲讲我的记录方式</title>
      <link>https://sundingyi.com/blog/31/</link>
      <pubDate>Sun, 20 Dec 2020 15:34:48 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/31/</guid>
      <description>我是个很喜欢产品的人，无论是硬件和软件都令我着迷，给予晶体管和代码以生命是件浪漫的事。 最近，我开始了解 Notion，开始使用 Notion，并</description>
    </item>
    
    <item>
      <title>Java 正则表达式</title>
      <link>https://sundingyi.com/blog/30/</link>
      <pubDate>Sat, 12 Dec 2020 17:32:13 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/30/</guid>
      <description>字符串是一个非常万能的类型，它不仅仅可以进行修改，还可以向各个数据类型进行转换，用户输入的信息基本上都用字符串接收。于是在向其他数据类型转换</description>
    </item>
    
    <item>
      <title>Java 常用基础类库</title>
      <link>https://sundingyi.com/blog/29/</link>
      <pubDate>Thu, 10 Dec 2020 22:06:53 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/29/</guid>
      <description>StringBuffer 类 每一个字符串的常量都属于一个 String 类的匿名对象，不可更改。 String 有两个常量池：静态常量池、运行时常量池。 String 类对象实例化建议使用直接赋值的方式完成</description>
    </item>
    
    <item>
      <title>深入多线程</title>
      <link>https://sundingyi.com/blog/28/</link>
      <pubDate>Tue, 08 Dec 2020 10:41:47 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/28/</guid>
      <description>停止线程 在多线程的操作之中，大多数情况下使用的是Thread的start()，如果对于多线程需要进行停止处理，Thread提供有stop()</description>
    </item>
    
    <item>
      <title>生产者消费者基本模型</title>
      <link>https://sundingyi.com/blog/27/</link>
      <pubDate>Tue, 08 Dec 2020 10:41:38 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/27/</guid>
      <description>模型概述 在多线程开发之中，最为著名的案例就是生产者与消费者操作。 流程 生产者负责信息内容的生产。 每当生产者完成一项完整的信息之后，消费者则取走</description>
    </item>
    
    <item>
      <title>多线程同步与死锁</title>
      <link>https://sundingyi.com/blog/26/</link>
      <pubDate>Sun, 06 Dec 2020 16:04:14 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/26/</guid>
      <description>线程同步 在多线程的处理过程之中，可以利用 Runnable 描述多个线程操作的资源，在在描述这些资源的时候，如果处理不当就会产生数据的错误操作。 引出 一个简单的</description>
    </item>
    
    <item>
      <title>多线程常用操作方法</title>
      <link>https://sundingyi.com/blog/25/</link>
      <pubDate>Sat, 05 Dec 2020 19:17:37 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/25/</guid>
      <description>多线程的常用方法大多都在 Thread 类中定义了。 线程的命名与取得 多线程的运行状态是不确定的，如果想要获取到某一个特定的线程，就需要通过线程的名字来进行</description>
    </item>
    
    <item>
      <title>Java 多线程基础</title>
      <link>https://sundingyi.com/blog/24/</link>
      <pubDate>Fri, 04 Dec 2020 21:25:46 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/24/</guid>
      <description>Java 支持多线程开发。在进行并发访问处理时可得到更高的处理性能。 进程：DOS 采用单进程处理，最大的特点就是同一个时间，只运行一个程序。Windo</description>
    </item>
    
    <item>
      <title>2020数字生活总结</title>
      <link>https://sundingyi.com/blog/23/</link>
      <pubDate>Wed, 02 Dec 2020 21:49:15 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/23/</guid>
      <description>Spotify 2019 2020</description>
    </item>
    
    <item>
      <title>TSP问题简单讨论</title>
      <link>https://sundingyi.com/blog/22/</link>
      <pubDate>Mon, 30 Nov 2020 18:38:32 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/22/</guid>
      <description>（本文为latex转markdown生成） 图在计算机中如何表示 邻接表 邻接表是一个链表的集合，链表的表头表示一个节点。比较适合存储稀疏的图。 例</description>
    </item>
    
    <item>
      <title>最简单的单向链表实现</title>
      <link>https://sundingyi.com/blog/21/</link>
      <pubDate>Mon, 30 Nov 2020 18:22:36 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/21/</guid>
      <description>interface ILink&amp;lt;E&amp;gt; { public void add(E e); public int size(); public boolean isEmpty(); public Object[] toArray(); public E get(int index); public void set(int index, E data); public boolean contains(E data); public void remove(E data); public void clean(); } class LinkImpl&amp;lt;E&amp;gt; implements ILink&amp;lt;E&amp;gt; { private class Node { private E data; private Node next; public Node(E data) { this.data = data; } public void addNode(Node newNode) { if (this.next == null)</description>
    </item>
    
    <item>
      <title>Java中关于String的常用方法</title>
      <link>https://sundingyi.com/blog/20/</link>
      <pubDate>Sat, 21 Nov 2020 18:51:45 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/20/</guid>
      <description>String和char[]之间常用 方法 描述 public String(char[] value) 把传入的字符数组变为字符串 public String(char[] value, int offset, int count) offset表示开始的位置，count表示个数 public char charAt(int</description>
    </item>
    
    <item>
      <title>OneNote的两个讨厌问题解决</title>
      <link>https://sundingyi.com/blog/19/</link>
      <pubDate>Sat, 21 Nov 2020 00:41:07 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/19/</guid>
      <description>强大的微软在开开心心的周五晚上毁了我的心情😠 OneNote的录音（音频）播放在蓝牙耳机下无法工作 问题复现 我的蓝牙耳机有两个连接模式：Hand</description>
    </item>
    
    <item>
      <title>Practice4</title>
      <link>https://sundingyi.com/blog/18/</link>
      <pubDate>Tue, 03 Nov 2020 14:27:43 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/18/</guid>
      <description>编写一个类A，该类创建的对象可以调用方法f输出小写的英文字母表。然后再编写一个A类的子类B，要求子类B必须继承类A的方法f（不允许重写），子</description>
    </item>
    
    <item>
      <title>Practice3</title>
      <link>https://sundingyi.com/blog/17/</link>
      <pubDate>Sun, 18 Oct 2020 10:16:43 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/17/</guid>
      <description>学生类（Student）:属性：姓名、年龄、数学成绩、英语成绩；方法：构造函数（初始化姓名和年龄），设置成绩，求均分；子类（Newstude</description>
    </item>
    
    <item>
      <title>Practice2</title>
      <link>https://sundingyi.com/blog/16/</link>
      <pubDate>Fri, 09 Oct 2020 13:04:36 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/16/</guid>
      <description>public class Test1 { public static void main(String[] args) { int[][] a = new int[][] { {1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {1, 2, 3, 4, 5} }; for (int[] b : a) { for (int c : b) { System.out.println(c); } } } } public class Test2 { public static void main(String[] args) { for</description>
    </item>
    
    <item>
      <title>排序</title>
      <link>https://sundingyi.com/blog/15/</link>
      <pubDate>Wed, 07 Oct 2020 17:58:04 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/15/</guid>
      <description>选择排序 public class P { public static void selectionSort(int[] arr) { for (int i = 0; i &amp;lt; arr.length - 1; ++i) { int temp = arr[i]; int flag = i; for (int j = i + 1; j &amp;lt; arr.length; ++j) { if (arr[j] &amp;lt; temp) { temp = arr[j]; flag = j; } } if (i != flag) { arr[flag] = arr[i]; arr[i] = temp;</description>
    </item>
    
    <item>
      <title>Practice1</title>
      <link>https://sundingyi.com/blog/14/</link>
      <pubDate>Tue, 29 Sep 2020 16:49:06 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/14/</guid>
      <description>2020/10/4 待交 //9 import java.util.Scanner; public class Test { public static void main(String[] args) { Scanner input = new Scanner(System.in); int[] arr = new int[10]; for (int i = 0; i &amp;lt; 10; ++i) { arr[i] = input.nextInt(); } int max = arr[0]; int min = arr[0]; for (int i = 0; i &amp;lt; 10; ++i) { if (arr[i] &amp;gt; max) max = arr[i]; if (arr[i] &amp;lt; min) min</description>
    </item>
    
    <item>
      <title>算法第一章习题记录</title>
      <link>https://sundingyi.com/blog/13/</link>
      <pubDate>Mon, 28 Sep 2020 20:23:42 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/13/</guid>
      <description>算法（第4版）作者: 塞奇威克 (Robert Sedgewick) / 韦恩 (Kevin Wayne) 第一章课后习题 //1.1.3 import java.util.Scanner; public class Test { public static void main(String[] args) { Scanner input = new Scanner(System.in); int a = input.nextInt(); int b = input.nextInt(); int c = input.nextInt(); if (a == b &amp;amp;&amp;amp; b == c) { System.out.println(&amp;#34;equal&amp;#34;); } else</description>
    </item>
    
    <item>
      <title>阅读摘抄（长期更新）</title>
      <link>https://sundingyi.com/blog/12/</link>
      <pubDate>Fri, 03 Jul 2020 15:03:40 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/12/</guid>
      <description>杨路：疫情阴影下的中美脱钩前景——有所缓和还是加速分离？｜端傳媒 Initium Media March 30, 2020 中国二月份公布的官方制造业采购经理人指数（PMI）是35.7，而非</description>
    </item>
    
    <item>
      <title>字符串和常用数据结构</title>
      <link>https://sundingyi.com/blog/11/</link>
      <pubDate>Sun, 28 Jun 2020 18:28:15 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/11/</guid>
      <description>字符串 字符串是由零个或多个字符组成的有限序列。在Python中，用&#39;&#39;或&amp;quot;&amp;quot;将一个或多个字符包含起来就可以表示一个字符串</description>
    </item>
    
    <item>
      <title>函数和模块</title>
      <link>https://sundingyi.com/blog/10/</link>
      <pubDate>Sun, 28 Jun 2020 15:53:03 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/10/</guid>
      <description>函数 将某一个功能封装到函数中。需要这个功能的时候只需要调用这个函数就可以了。 可以不传入参数。 定义函数 使用def关键字来定义函数，函数的命名和</description>
    </item>
    
    <item>
      <title>Python基础</title>
      <link>https://sundingyi.com/blog/9/</link>
      <pubDate>Sat, 27 Jun 2020 14:19:44 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/9/</guid>
      <description>Python历史 1989年圣诞节：Guido von Rossum开始写Python语言的编译器。 1991年2月：第一个Python编译器（同时也是</description>
    </item>
    
    <item>
      <title>评论/留言区上线</title>
      <link>https://sundingyi.com/blog/8/</link>
      <pubDate>Fri, 19 Jun 2020 22:36:47 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/8/</guid>
      <description>可真的会有人在里面写东西吗 hugo使用评论区已经有几套成熟的方案了，我选择的是utterances+github的方式，不需要后端配合。 建立</description>
    </item>
    
    <item>
      <title>当我们在评论《切尔诺贝利》时我们在谈论什么</title>
      <link>https://sundingyi.com/blog/82fbce2c/</link>
      <pubDate>Mon, 20 Apr 2020 02:25:03 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/82fbce2c/</guid>
      <description>最近一周在读S.A.阿列克谢耶维奇的《我不知道该说什么，关于死亡还是爱情》，一本采访集，讲述的是切尔诺贝利事件的亲历者所感所想，所到之处皆是</description>
    </item>
    
    <item>
      <title>Git笔记</title>
      <link>https://sundingyi.com/blog/7/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sundingyi.com/blog/7/</guid>
      <description>git是这个世界上目前最先进的分布式版本控制系统。 千万不要使用Windows自带的记事本编辑任何文本文件。 创建版本库 mkdir 是创建文件夹的命令， pwd</description>
    </item>
    
    <item>
      <title>语雀作为在线平台同步hugo</title>
      <link>https://sundingyi.com/blog/6/</link>
      <pubDate>Mon, 09 Mar 2020 16:43:15 +0000</pubDate>
      
      <guid>https://sundingyi.com/blog/6/</guid>
      <description>第一次接触语雀是在去年，当时在找一个靠谱的在线笔记编辑平台，听闻是阿里出品的，后来实际接触感觉还不错。支持Markdown很舒服。 同步语雀的</description>
    </item>
    
    <item>
      <title>有意思的一个转场</title>
      <link>https://sundingyi.com/blog/5/</link>
      <pubDate>Thu, 06 Feb 2020 21:00:55 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/5/</guid>
      <description>S03E08 眼前一亮的感觉，反复看了几遍，发现拍摄手法比我想象的简单多了&amp;hellip; 至于为什么看出来了？Joel跑完属实有点喘</description>
    </item>
    
    <item>
      <title>我抬起了头，却满是坟墓</title>
      <link>https://sundingyi.com/blog/4/</link>
      <pubDate>Mon, 04 Nov 2019 21:27:11 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/4/</guid>
      <description>跑完步了，戴着耳机享受下和自己相处，天气转凉以来身体明显没有夏天时候好了，呼吸到冷空气都会很难受，这几十年，原本就是个折腾的过程。一条路一条</description>
    </item>
    
    <item>
      <title>原来我创造了世界</title>
      <link>https://sundingyi.com/blog/3/</link>
      <pubDate>Sat, 02 Nov 2019 00:22:31 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/3/</guid>
      <description>科幻作品我看过和读过不少，上一次读过的是《深渊上的火》，隔了几个月，我刚刚读完了小林泰三的《玩具修理者》和《醉步男》。 很震惊的说，我已经很久</description>
    </item>
    
    <item>
      <title>什么是哥白尼哲学抑郁</title>
      <link>https://sundingyi.com/blog/1/</link>
      <pubDate>Sun, 27 Oct 2019 19:11:16 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/1/</guid>
      <description>极简宇宙史 这是我最近正在阅读的一本书，特别值得推崇的是全书中只有E = mc^2这么一个简洁的公式，而且行文也易懂，我还是忘不了多次被我多次中途</description>
    </item>
    
  </channel>
</rss>
