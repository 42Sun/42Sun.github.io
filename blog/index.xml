<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>文章 on 孙丁一的博客</title>
    <link>https://sundingyi.com/blog/</link>
    <description>Recent content in 文章 on 孙丁一的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 03 Nov 2020 14:27:43 +0800</lastBuildDate><atom:link href="https://sundingyi.com/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Practice4</title>
      <link>https://sundingyi.com/blog/18/</link>
      <pubDate>Tue, 03 Nov 2020 14:27:43 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/18/</guid>
      <description>编写一个类A，该类创建的对象可以调用方法f输出小写的英文字母表。然后再编写一个A类的子类B，要求子类B必须继承类A的方法f（不允许重写），子类B创建的对象不仅可以调用方法f输出小写的英文字母表，而且可以调用子类新增的方法g输出大写的英文字母表。最后编写主类C，在主类的main方法中测试类A与类B。  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  public class C { public static void main(String[] args) { A a = new A(); a.f(); B b = new B(); b.f(); b.g(); } } class A { void f() { System.out.println(&amp;#34;abcdefghijklmnopqrstuvwxyz&amp;#34;); } } class B extends A { void g() { System.out.println(&amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34;); } }    按要求编写一个Java应用程序：</description>
    </item>
    
    <item>
      <title>Practice3</title>
      <link>https://sundingyi.com/blog/17/</link>
      <pubDate>Sun, 18 Oct 2020 10:16:43 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/17/</guid>
      <description>学生类（Student）:属性：姓名、年龄、数学成绩、英语成绩；方法：构造函数（初始化姓名和年龄），设置成绩，求均分；子类（Newstudent）:属性：政治成绩；方法：构造函数，设置成绩（与父类的设置成绩构成重载），求均分；在main函数中定义子类的对象，调用其所有方法；  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  public class Test14 { public static void main(String[] args) { NewStudent a = new NewStudent(&amp;#34;Zhang&amp;#34;, 20); a.setGrade(45, 35, 77); System.out.println(a.getAvg()); } } class Student { String name; int age; float mathGrade; float engGrade; Student(String name, int age) { this.</description>
    </item>
    
    <item>
      <title>Practice2</title>
      <link>https://sundingyi.com/blog/16/</link>
      <pubDate>Fri, 09 Oct 2020 13:04:36 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/16/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  public class Test1 { public static void main(String[] args) { int[][] a = new int[][] { {1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {1, 2, 3, 4, 5} }; for (int[] b : a) { for (int c : b) { System.</description>
    </item>
    
    <item>
      <title>排序</title>
      <link>https://sundingyi.com/blog/15/</link>
      <pubDate>Wed, 07 Oct 2020 17:58:04 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/15/</guid>
      <description>选择排序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  public class P { public static void selectionSort(int[] arr) { for (int i = 0; i &amp;lt; arr.length - 1; ++i) { int temp = arr[i]; int flag = i; for (int j = i + 1; j &amp;lt; arr.length; ++j) { if (arr[j] &amp;lt; temp) { temp = arr[j]; flag = j; } } if (i !</description>
    </item>
    
    <item>
      <title>Practice1</title>
      <link>https://sundingyi.com/blog/14/</link>
      <pubDate>Tue, 29 Sep 2020 16:49:06 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/14/</guid>
      <description>2020/10/4 待交 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  //9 import java.util.Scanner; public class Test { public static void main(String[] args) { Scanner input = new Scanner(System.in); int[] arr = new int[10]; for (int i = 0; i &amp;lt; 10; ++i) { arr[i] = input.nextInt(); } int max = arr[0]; int min = arr[0]; for (int i = 0; i &amp;lt; 10; ++i) { if (arr[i] &amp;gt; max) max = arr[i]; if (arr[i] &amp;lt; min) min = arr[i]; } System.</description>
    </item>
    
    <item>
      <title>算法第一章习题记录</title>
      <link>https://sundingyi.com/blog/13/</link>
      <pubDate>Mon, 28 Sep 2020 20:23:42 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/13/</guid>
      <description>刷题的第一天！！
 算法（第4版）作者: 塞奇威克 (Robert Sedgewick) / 韦恩 (Kevin Wayne) 第一章课后习题 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  //1.1.3 import java.util.Scanner; public class Test { public static void main(String[] args) { Scanner input = new Scanner(System.in); int a = input.nextInt(); int b = input.nextInt(); int c = input.nextInt(); if (a == b &amp;amp;&amp;amp; b == c) { System.out.println(&amp;#34;equal&amp;#34;); } else System.</description>
    </item>
    
    <item>
      <title>阅读摘抄（长期更新）</title>
      <link>https://sundingyi.com/blog/12/</link>
      <pubDate>Fri, 03 Jul 2020 15:03:40 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/12/</guid>
      <description>杨路：疫情阴影下的中美脱钩前景——有所缓和还是加速分离？｜端傳媒 Initium Media March 30, 2020
  中国二月份公布的官方制造业采购经理人指数（PMI）是35.7，而非制造业（主要是服务业）的PMI则为29.6。普通读者并不需要太熟悉中国的统计数据，根据历年数据的比较，就可以看出两个数字已经“低到坑里”，均为史上最差表现。简单来说，PMI指数高于50意味着预期扩张，反之则为预期收缩。二月的数据显然已经超出了历史浮动的范围，出现了自由落体式的下坠，幅度都已经超过了2007-2008金融危机时的最坏表现。 货币与财政虽然是美国政策优先选项，但目前各有各的问题。对于白宫来说，另外一个短时间内可以马上动用的政策选项就是重振国际贸易。尽管特朗普可能会很不情愿，许多中美之间经济结构性问题也仍然没有得到解决，但随着美国今年经济衰退的可能性大大增加，他将最终不得不考虑与中国贸易和解的必要性。   你当像鸟飞往你的山
  当你是一个地方的一部分，在它的土壤上成长的时候，没有必要说出你来自那里。我从未说过“我来自爱达荷州”，直到我离开了那里。   激荡十年，水大鱼大 (吴晓波)
  事件被曝光是在2008年的9月9日，上海《东方早报》顶着巨大的压力，在当天的头版头条发表记者简光洲的新闻稿《甘肃14名婴儿同患肾病疑因喝“三鹿”奶粉所致》，将这一行业丑闻公之于世，并明确地点名三鹿。 在正常的国家，人们遇到问题了，有立法系统和民意代表、独立的法院，当然也有媒体。解决问题的方法是多样的，而在中国往往只剩下媒体。 在1956年，中日的经济总量几乎相同，可是，在后来的二十年里，一个陷入意识形态的争斗，一个全速发展经济，竟然又拉大了距离。 石家庄和太原之间的客专更是用一个隧道穿过了整座太行山。   乌合之众：群体心理学(古斯塔夫•勒庞)
  尤其是，群体是匿名的，因此也是不负责任的。 谁依赖拉丁民族群体，就可以爬得很高，升得很快，但这就像是身处塔尔皮亚岩石旁，有一天必定会从上面坠落下来 观念是过去之女，未来之母，总是时间之奴。 比方说，世界上最民主的国家是英国，但它却是君主立宪制，而南美的一些西班牙语国家的共和国，有着共和国的宪法，却遭受着最严重的独裁。 人们对他们要求太高，要求他们在某一天，坐在一张椅子上，或者一块黑板前，针对一类学术问题，在长达两个小时的时间里，成为所有人类知识的活生生的储存库。事实上，这一天，在两小时内，他们确实做到了，或者大致做到了。但是，一个月之后，他们就做不到了。 许多情感，比如荣誉、忍让、宗教信仰，对荣耀和祖国的爱，到目前为止，一直是所有文明的重要推动元素，它们都不是因为理性而诞生的，而且往往是在理性根本无能为力的情况下诞生的。 他们主要借助以下三种手段：断言、重复、传染。 那些长期保持威望的人，从不容忍讨论。要想让群体敬仰，一定要能与他们保持距离。 至于政治家们，他们早已不再引导舆论，而是追随舆论。他们对舆论的害怕，有时甚至已经到了一种恐惧的地步，使他们的行为没有了任何固定性。   病毒加持串流平台大战：电影院产业终于走进最后的告别长夜？｜端傳媒 Initium Media
  因为他们制作、发行、放映一把抓的托拉斯经营方式已经引发政府关切，并在1948年被最高法院强制拆分电影院的经营权。断开发行和放映业的锁链之后，顿失法力的好莱坞再也不能靠著搭售廉价B级电影来轻松赚饱饱。 接下来好莱坞更锁定了“电视节目必须阖家观赏”这个要害。因为电波频率是有限资源，无线电视频道是必须领有执照的特许行业，也因此从一开始就直接受到政府的内容审查和高度管制。相反的是，电影业一直以来采用公会自律的方式自我审查分级，因而享有比政府管制更多的弹性，可以随著社会思维的演进而主动探索节目尺度的界线，比如首部获得奥斯卡最佳影片的X级电影《午夜牛郎》（Midnight Cowboy）或是第一部大规模商业放映的NC-17电影《美国舞娘》（Showgirls）。   英国引以为傲的NHS健保，为何在病毒来袭前就已不堪重负？｜端傳媒 Initium Media 2020年3月30日
  长期来看，NHS的抗疫表现，将在未来的某个节点成为NHS是否被部分拆分私有化的关键。等疫情散去，关于公营服务私有化的讨论将被两党重新提起，公费医疗的效率问题会继续成为保守党攻击的焦点；而工党及其支持者们也将一步不让地反对医疗服务私有化。   瑞幸财务造假是个别人所为吗？ 财新数据通 2020/4/7 13:15
  瑞幸大规模财务造假一旦坐实，将面临怎样的后果？刘安表示，瑞幸涉嫌造假的法律后果，可以参考2001 年美国安然公司丑闻的案例，如果造假的事实情节属实的话，首先公司必然会遭到美国证监会的行政执法的天价的监管罚单，包括从交易所退市也将难以避免，十有八九的后果将会导致公司破产。其次，公司的董事会成员和高管将面临着美国司法部所启动的《证券欺诈刑事调查和起诉》，或有牢狱之灾，如果不能达成刑事和解 ，面临的将是最高不超过25 年的监禁刑期，具体要根据他们造假的情节和事实认定，由美国的法院来最终决定。符合条件的公司股东和投资者，将很有可能向公司的董事、高管以及造假的欺诈行为，发生期间的投行、律师、会计师等专业服务机构提起证券的民事集团诉讼，索求巨额的赔偿。 数据造假，还是从伪造交易流水入手的，只能理解为资本潮水褪去，一切都在裸泳。   武汉之春 特约摄影师 Zuo Zuo 发自武汉 | 2020-04-04April 12, 2020</description>
    </item>
    
    <item>
      <title>字符串和常用数据结构</title>
      <link>https://sundingyi.com/blog/11/</link>
      <pubDate>Sun, 28 Jun 2020 18:28:15 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/11/</guid>
      <description>字符串 字符串是由零个或多个字符组成的有限序列。在Python中，用&#39;&#39;或&amp;quot;&amp;quot;将一个或多个字符包含起来就可以表示一个字符串。
转义符号 使用转义符号\可以将它后面的字母不再表示原本的意思。在\后面还可以跟一个八进制或者十六进制数来表示字符，例如\141和\x61都代表小写字母a，前者是八进制的表示法，后者是十六进制的表示法。也可以在\后面跟Unicode字符编码来表示字符。
如果不希望转义，可以在字符串前面加r
简化 1 2  a, b = 5, 10 print(&amp;#39;%d* %d= %d&amp;#39; % (a, b, a * b))   当然，我们也可以用字符串提供的方法来完成字符串的格式，代码如下所示。
1 2  a, b = 5, 10 print(&amp;#39;{0} * {1} = {2}&amp;#39;.format(a, b, a * b))   Python 3.6以后，格式化字符串还有更为简洁的书写方式，就是在字符串前加上字母f，我们可以使用下面的语法糖来简化上面的代码。
1 2  a, b = 5, 10 print(f&amp;#39;{a} * {b} = {a * b}&amp;#39;)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  str1 = &amp;#39;hello, world!</description>
    </item>
    
    <item>
      <title>函数和模块</title>
      <link>https://sundingyi.com/blog/10/</link>
      <pubDate>Sun, 28 Jun 2020 15:53:03 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/10/</guid>
      <description>函数 将某一个功能封装到函数中。需要这个功能的时候只需要调用这个函数就可以了。 可以不传入参数。
定义函数 使用def关键字来定义函数，函数的命名和变量的命名相同，即下划线命名法。 并且需要return回一个值作为函数执行结果。
1 2 3 4 5 6 7 8 9 10 11 12 13  &amp;#34;&amp;#34;&amp;#34; 输入M和N计算C(M,N) 阶乘运算 &amp;#34;&amp;#34;&amp;#34; def fac(num): result = 1 for i in range(1, num + 1): result *= i return result m = int(input(&amp;#39;请输入m：&amp;#39;)) n = int(input(&amp;#39;请输入n：&amp;#39;)) print(fac(m) // fac(n) // fac(m - n))    可变参数 当传入变量时如此定义def example(*name)即是一个可变参数。
模块 为了避免函数的滥用，每个文件即是一个模块（module），使用import即可导入指定的模块。from .. import .. 如果导入的一个模块还含有可执行的代码，那么在导入这个模块的时候就会执行这些代码。
1  if __name__ = &amp;#39;__main__&amp;#39;:   如果被导入的模块中含有如此，则只会在单纯执行此模块时才会运行。导入并不会执行</description>
    </item>
    
    <item>
      <title>Python基础</title>
      <link>https://sundingyi.com/blog/9/</link>
      <pubDate>Sat, 27 Jun 2020 14:19:44 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/9/</guid>
      <description>Python历史  1989年圣诞节：Guido von Rossum开始写Python语言的编译器。 1991年2月：第一个Python编译器（同时也是解释器）诞生，它是用C语言实现的（后面），可以调用C语言的库函数。在最早的版本中，Python已经提供了对“类”，“函数”，“异常处理”等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序。 1994年1月：Python 1.0正式发布。 2000年10月16日：Python 2.0发布，增加了完整的垃圾回收，提供了对Unicode的支持。与此同时，Python的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成。 2008年12月3日：Python 3.0发布，它并不完全兼容之前的Python代码，不过因为目前还有不少公司在项目和运维中使用Python 2.x版本，所以Python 3.x的很多新特性后来也被移植到Python 2.6/2.7版本中。  更详细的历史：《Python简史》
 变量  整形：Python可以处理任意大小的整数，在Python3中只有int。并且支持二进制（0b开头），八进制（0o开头），十进制，十六进制（0x开头）。 浮点型：小数。浮点指的是在用科学计数法表示时，小数点是可以浮动的。支持科学计数法（1.11e2）。 字符串型：以&#39;&#39;或&amp;quot;&amp;quot;括起来。用&#39;&#39;&#39; &#39;&#39;&#39;的表示方法可以多行。 布尔型： True和 False，布尔运算亦可以得出布尔型。 复数型：如1+1j，并不常用。  给变量命名  硬性规则： 字母数字下划线组成，数字不能开头。 大小写区分 不要用关键字 PEP 8规则： 用小写字母拼写，多个单词用下划线连接。 受保护的实例属性用单个下划线开头。 私有的实例属性用两个下划线开头。  变量的转换   int()：将一个数值或字符串转换成整数，可以指定进制。
  float()：将一个字符串转换成浮点数。
  str()：将指定的对象转换成字符串形式，可以指定编码。
  chr()：将整数转换成该编码对应的字符串（一个字符）。
  ord()：将字符串（一个字符）转换成对应的编码（整数）。
  分支结构 if 关键词有if,elif,else
1 2 3 4 5 6 7 8 9 10 11 12  #英制单位英寸和公制单位厘米互换 value = float(input(&amp;#39;输入长度：&amp;#39;)) unit = input(&amp;#39;输入单位：&amp;#39;) if unit == &amp;#39;in&amp;#39; or unit == &amp;#39;英寸&amp;#39;: print(str(value) + &amp;#39;英寸=&amp;#39; + str(value * 2.</description>
    </item>
    
    <item>
      <title>评论/留言区上线</title>
      <link>https://sundingyi.com/blog/8/</link>
      <pubDate>Fri, 19 Jun 2020 22:36:47 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/8/</guid>
      <description>可真的会有人在里面写东西吗
  hugo使用评论区已经有几套成熟的方案了，我选择的是utterances+github的方式，不需要后端配合。 建立一个公开仓库用来储存评论内容。utterances提供了一个应用来绑定，很方便。每一个评论就是这个仓库里的issue，管理性没有大问题。
  在主题的对应html里加上提供的代码就可以了。
  评论需要有一个github账号，在每篇文章的底部就可以通过登录这个账号进行评论。
  尽管我感觉是要万年零回复了。。
  </description>
    </item>
    
    <item>
      <title>Git笔记</title>
      <link>https://sundingyi.com/blog/7/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sundingyi.com/blog/7/</guid>
      <description>git是这个世界上目前最先进的分布式版本控制系统。 千万不要使用Windows自带的记事本编辑任何文本文件。
创建版本库 mkdir 是创建文件夹的命令，
pwd 显示当前路径，
git init 创建版本库。
把文件加入到版本库 git add git commit -m &amp;quot;message&amp;quot; 提交，message里为本次提交的信息，
git status 查看当前状态，
git diff 查看某一文件变化。
回退版本 上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
git reset 回退命令
 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。  git restore 文件名 取消工作区的修改，
git restore --staged 文件名 取消暂存区的修改。
删除文件 rm 文件名 删除文件，
git rm 文件名 在暂存区中提交指令
分支 查看分支：git branch
创建分支：git branch &amp;lt;name&amp;gt;
切换分支：git checkout &amp;lt;name&amp;gt;或者git switch &amp;lt;name&amp;gt;
创建+切换分支：git checkout -b &amp;lt;name&amp;gt;或者git switch -c &amp;lt;name&amp;gt;</description>
    </item>
    
    <item>
      <title>语雀作为在线平台同步hugo</title>
      <link>https://sundingyi.com/blog/6/</link>
      <pubDate>Mon, 09 Mar 2020 16:43:15 +0000</pubDate>
      
      <guid>https://sundingyi.com/blog/6/</guid>
      <description>第一次接触语雀是在去年，当时在找一个靠谱的在线笔记编辑平台，听闻是阿里出品的，后来实际接触感觉还不错。支持Markdown很舒服。
 同步语雀的文章到hugo里
偶然看到了这个项目，慢慢上手发现语雀+hugo完美解决了我笔记+博客的需求。
原理是通过一个接口把文章用Hugo语法格式下载下来。
再慢慢学习一下，就把笔记通过这个模式发展下来把。</description>
    </item>
    
    <item>
      <title>有意思的一个转场</title>
      <link>https://sundingyi.com/blog/5/</link>
      <pubDate>Thu, 06 Feb 2020 21:00:55 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/5/</guid>
      <description>S03E08
眼前一亮的感觉，反复看了几遍，发现拍摄手法比我想象的简单多了&amp;hellip;
至于为什么看出来了？Joel跑完属实有点喘</description>
    </item>
    
    <item>
      <title>我抬起了头，却满是坟墓</title>
      <link>https://sundingyi.com/blog/4/</link>
      <pubDate>Mon, 04 Nov 2019 21:27:11 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/4/</guid>
      <description>跑完步了，戴着耳机享受下和自己相处，天气转凉以来身体明显没有夏天时候好了，呼吸到冷空气都会很难受，这几十年，原本就是个折腾的过程。一条路一条路的走，会走到哪里我永远都不会知道。
因远离市区而得以享受清净的空气，抬头就是星星，时间就好像是一下从几岁开始流淌了几十年，一切都是那个样子。人人拼命自转，而他们还在那里。好吧，让我们从这个浪漫的情景中走出来，我在眼眶泛红的前一瞬猛然意识到，星星们好多都已经“死去”了，从遥远的虚空中长途迁徙而来的不过是他们发出的光，而他们本体，早早就成为了其他。
得益于光，这个世界才出现在意识中央，行星们用尽寿命发光，直至死方休。那些光，勤恳的走了好多亿年，来到地球，不可否认，这是个很吸引人的说法。可表面光鲜也好，靓丽也好，本质上却早已经折败于宇宙中的基本运行理论。
我们也在发光，不过更短。</description>
    </item>
    
    <item>
      <title>原来我创造了世界</title>
      <link>https://sundingyi.com/blog/3/</link>
      <pubDate>Sat, 02 Nov 2019 00:22:31 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/3/</guid>
      <description>科幻作品我看过和读过不少，上一次读过的是《深渊上的火》，隔了几个月，我刚刚读完了小林泰三的《玩具修理者》和《醉步男》。
很震惊的说，我已经很久不读硬科幻了，印象最为深刻的就是《三体》里令我抓心挠肝的文学描写，太偏了，实在是偏。但《醉》让我起了一身的鸡皮疙瘩
《玩》扮演的是赠品的角色，与《醉》相比少了不少味道，算是一部中规中矩的恐怖小说，文学风格和他们的国土面积一样，都很小很秀气。~~不过好像我并没有觉得恐怖。~~接下来主要谈谈《醉》。
 葛饰一处女，芳名手儿奈。传墓在此间，叶茂松柏青。古松根久远，枝老叶犹荣。青冢不可寻，芳名忘不成。　 故事取材于日本现存最早的诗集《万叶集》，女主名手儿奈，也是经常在诗中出现的名字，但在本书中，只能说神秘。故事背景就差不多是这样的，我更想直接呼喊，对我自己，对这个世界：我到底是谁啊，我到底是不是时间的管理者啊。
由于作者的理工科身份，这一点倒是和我很像，书中把几个量子力学中在科幻中被用烂的名字特别精巧的重新解构，带出来的效果是拔群的。看似漏洞百出，实则无懈可击。这一切的源于在常规科幻作品中出现的时空穿越往往是客观上的，而这一次，变成了纯主观现象。
意识是流动的，时间是流动的
我第一次被这种观点震惊到了，我只能直呼过瘾，我才是世界的掌握者，这也太刺激了吧。只进行对自己大脑的改造就实现了时空穿越听起来确实不可思议，但这引起了自古以来的一个探讨，这个世界是我的还是我是这个世界的。
当我能够进行随机的时空跳跃的时候，我该如何思考。原来这一切都是假的，都是骗局。时间是固体，是不会被移动的。但是，我们是人类啊，我们有意识啊，我们的意识推动了时间的流逝。如此，生活变得戏剧化，仿佛我死了这个世界就不存在了，亦或是每个人都有他自己的世界。
一切都变得渺小了
但我却不能控制时间，就在我打字的时候，时间还在走。可能未来有一天真的会凝固。 我好困了，希望一觉醒来明天还是明天。尽管我觉得自己微不足道起来了。</description>
    </item>
    
    <item>
      <title>DNS污染？</title>
      <link>https://sundingyi.com/blog/2/</link>
      <pubDate>Mon, 28 Oct 2019 21:59:00 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/2/</guid>
      <description>这个站刚刚开放了3天，把我折腾的不行，刚刚又发现了点不对的地方，访问网站的时候某些json不能正确的加载导致动画不会出现。
(index):52 Failed to find a valid digest in the &#39;integrity&#39; attribute for resource &#39;https://sundingyi.com/styles/owlCarousel.min.fb3b2db7ac73c4ba8d021450bcf5556ff7385dfd0c1ee5fb4a69c75f41f2fd29.css&#39; with computed SHA-256 integrity &#39;sfJuKcQ8Yf6LWm8iW07nxflpp7M8/lEnBiceByRtk9E=&#39;. The resource has been blocked. (index):1 
Failed to find a valid digest in the &#39;integrity&#39; attribute for resource &#39;https://sundingyi.com/js/bundle.02b6288fcd4c358451657f10dc5ff7760229d03df75243bce75eeed353f4f935.js&#39; with computed SHA-256 integrity &#39;5pNOadBruKITE09MFGj5R4u3dV54bftg48WpF8UzWAU=&#39;. The resource has been blocked. (index):1 
Failed to find a valid digest in the &#39;integrity&#39; attribute for resource &#39;https://sundingyi.com/js/bundleOwlCarousel.84c001859cd27dd29f730ab6e2a17834f2614cd035b5b887dcd252aeeda3c3a0.js&#39; with computed SHA-256 integrity &#39;r8y2Zf/d+SEBqLwEuSSkpbmjbArQrWECTadRzdj9Htk=&#39;. The resource has been blocked.</description>
    </item>
    
    <item>
      <title>什么是哥白尼哲学抑郁</title>
      <link>https://sundingyi.com/blog/1/</link>
      <pubDate>Sun, 27 Oct 2019 19:11:16 +0800</pubDate>
      
      <guid>https://sundingyi.com/blog/1/</guid>
      <description>极简宇宙史
这是我最近正在阅读的一本书，特别值得推崇的是全书中只有E = mc^2这么一个简洁的公式，而且行文也易懂，我还是忘不了多次被我多次中途弃读的《时间简史》
在文中我接触到了一个第一次接触到的词，哥白尼哲学抑郁。我用这个词在各大搜索引擎上找了又找，均指向了一个词哥白尼式革命不知道是不是翻译的问题，总之这两者代表的是一种意思，由康德提出。 哥白尼把地球和太阳之间的位置关系颠倒了过来看，而康德一改知识必须符合对象的传统思路，尝试让对象来符合主体本身的认识形式的新思路。是对哲学认识论中经验论和唯理论的一种调和。
 对于哲学，我几乎是没有涉猎的，对我来说太难理解了，需要很大的力气去翻书，思考。我在这里找到了一个例子来解释，对于车与路来说，以前的人研究的是路况，康德研究的是车子的性能。也就是说对于一件事的理性感性的差别，往往都会有不同的结果。
还是要找机会读读《 纯粹理性批判 》。</description>
    </item>
    
  </channel>
</rss>
